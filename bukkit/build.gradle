plugins {
    id 'org.hidetake.ssh'
}

dependencies {
    compile project(":shared")
    compile project(":bukkit-api")
    compileOnly files("../../libs/patched_1.12.2.jar", "../../libs/spigot_1.16.3.jar")

    testApi files("../../libs/patched_1.12.2.jar", "../../libs/spigot_1.16.3.jar")
    testApi 'com.destroystokyo.paper:paper-api:1.12.2-R0.1-SNAPSHOT'
    testApi "org.jetbrains.kotlinx:kotlinx-serialization-core:$kotlinSerializationVersion"
    testApi "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinSerializationVersion"
    testApi "org.jetbrains.kotlinx:kotlinx-serialization-cbor:$kotlinSerializationVersion"
    testApi "org.jetbrains.kotlinx:kotlinx-serialization-protobuf:$kotlinSerializationVersion"
    testApi('com.charleskorn.kaml:kaml:0.26.0'){
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.jetbrains.kotlinx'
        exclude group: 'org.jetbrains.annotations'
    }
}

remotes {
    host {
        host = System.getenv("PLU_PUSH_HOST")
        port = System.getenv("PLU_PUSH_PORT").toInteger()
        user = System.getenv("PLU_PUSH_USER")
        agent = true
    }
}

jar{
    doFirst {
        project.file("build/classes/kotlin/main/plugin.yml").text = """main: "pluginloader.internal.bukkit.JavaPlugin"
version: "${rootProject.version}"
name: "PluginLoader"
"""
    }
}

task upload {
    dependsOn build
    doLast {
        ssh.run {
            session(remotes.host) {
                put from: "$buildDir/libs/${rootProject.name}-${rootProject.version}.jar", into: "$p"
            }
        }
    }
}

jar.archiveName("${rootProject.name}-${rootProject.version}.jar")
jar.from{configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it)}}